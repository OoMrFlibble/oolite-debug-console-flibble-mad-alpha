[Settings]
SaveConfigOnExit = yes
SaveHistoryOnExit = yes
Port = 49999
EndPort = 50003
ServerAddress = 127.0.0.1
HideDefaultComments = no           // toggles the appearance of default comments (like this one) in this file
EnableShowConsole = yes            // master toggle for 3 "Show Console for ..." in Debug menu
                                   //   will be automatically set if any of the 3 are turned on
OldClearBehaviour = no             // command box 'Clear' button clears the output (upper) window, not the command line
MacroExpansion = yes               // show "macro-expansion" messages when executing macros
TruncateCmdEcho = no               // shorten command echos to a single line
ResetCmdSizeOnRun = yes            // resize cmdLine window after a command is run
MsWheelHistory = no                // toggle for using the mouse wheel to scroll the command history
PlistOverrides = yes               // if yes, colors & fonts are replaced with those from Oolite
FormatAliasFns = no                // toggle formatting an alias that is a function/IIFE
                                   //   also used to detect .cfg from previous version
                                   //   (if you want to restore all default comments, just delete this option)
MaxHistoryCmds = 200               // maximum # of commands in the command history
MaxBufferSize = 200000             // upper limit on the size (bytes) of the command history
ColorMenus = no                    // toggle for applying colors to menus
ColorPopups = no                   // toggle for applying colors to popup menus
ColorButtons = no                  // toggle for applying colors to buttons
/*
 * internal, alter at your own risk
 */
Geometry = 1851x878+40+527
SashOffset = 709
BaseTimingMS = 5                   // base rate (milliseconds) for network msgs
FindToolTipDelayMS = 1000          // delay (milliseconds) before showing tool tips in Finder window
                                   //  - set to 0 to disable them
SearchToolTipDelayMS = 1000        // delay (milliseconds) before showing tool tips in text window Search box
                                   //  - set to 0 to disable them
/*
 * list of remaining tool tips.  Can also be set to all or none
 */
ToolTips = ["searchTarget", "searchTargetClear", "searchCountBtn", "searchMarkall", "searchBackwardsBtn", "searchWordsOnlyBtn", "searchWrapBtn", "searchRegexBtn", "grepPath_Entry", "grepOxzFilesBtn", "allBox", "checkedBox", "clearChecked", "deleteChecked", "grepExcl_Entry", "grepIncl_Entry", "grepText_Entry", "grepMatchAllBtn", "grepQuitOnFirstBtn", "grepContextNum", "grepTreatToken", "grepTreatWord", "grepTreatSubstring", "grepTreatRegex", "grepTreatFile", "aliasPollCheck", "aliasAsButton"]

[Font]
/*
 * these 2 exist in console.settings (as font-face, font-size),
 * so changes of these are also stored there, when PlistOverrides is set
 */
Family = Arial
Size = 10                          /* Tk: "The font height as an integer in points.
                                           To get a font n pixels high, use -n" */
/*
 * these 3 are only saved locally, as they are not a part of Oolite
 */
Weight = normal                    // "bold" for boldface, "normal" for regular weight
Slant = roman                      // "italic" for italic, "roman" for un-slanted
disabled = normal                  // "overstrike" or "normal" (adds strike-through for visibility)

[Colors]
/*
 * colors used in debug console, when PlistOverrides is not set
 * they can be specified by any of the 502 (!) Tk names, like:
 *   black, red, green, blue, cyan, yellow, magenta, white, gray100, deep pink,
 *   deep sky blue, turquoise4, LawnGreen, goldenrod1, MediumOrchid1,
 *   cornflower blue, blanched almond, peach puff, PaleVioletRed, saddle brown, ...
 * or Oolite color names:
 *   blackColor, darkGrayColor, grayColor, lightGrayColor,
 *   whiteColor, redColor, greenColor, blueColor, cyanColor,
 *   yellowColor, magentaColor, orangeColor, purpleColor, brownColor
 * or custom colors as a string in the format "#rrggbb" (or "#rgb"),
 *   where rr, gg, bb are 2 digit hexadecimals, so the first list starts with:
 *   #000000, #ff0000, #00ff00, #0000ff, #00ffff, #ffff00, #ff00ff, #ffffff
 */
General-foreground = yellow
General-background = black
Command-foreground = cyan
Command-background = NavyBlue
Select-foreground = black
Select-background = white

[History]
AliasWindow = 1416x1019+650+381    // geometry of alias editor.
AliasSashOffset = [150, 1]
FinderWindow = 540x400+30+30       // geometry of file search window
FindSashOffset = 270
/*
 * listbox history (max. 20) of file search File types & its 'checked' status
 */
FindTypes = [["*.js", [" "]], ["*.plist", [" "]], ["*.txt", [" "]], ["*.js, *.zip", [" "]], ["*.js, *.plist", [" "]], ["*.js, *.txt", [" "]], ["*.plist, *.txt*.js; *.plist; *.txt", [" "]]]
FindIncluding = current            // file search option for including all/checked file types
                                   //   in the list or just the current one
/*
 * listbox history (max. 20) of file Search excluded types & its 'checked' status
 */
FindExcls = [["<empty>", [" "]], ["*.dat; *.fragment, *.vertex", [" "]], [".mtl .obj", [" "]], ["Oolite_Readme.txt", [" "]], ["oolite.app/", [" "]], ["*.oolite-save", [" "]], ["*.pdf *.rtf", [" "]], ["Resources/", [" "]], [".zip", [" "]]]
FindExcluding = all                // file search option for excluding all/checked file types
                                   //   in the list or just the current one
FindSearching = current            // file search option for matching all/checked search terms
                                   //   in the list or just the current one
FindIgnoreCase = yes               // file search toggle for case sensitivity
FindMatchAll = no                  // file search toggle for matching all (vs any) terms
FindQuitOnFirst = no               // file search toggle for halting search of a file once
                                   //   a match has been found (faster search)
FindSubDirs = yes                  // file search toggle for searching sub-folders
FindOxzFiles = yes
FindContextLines = 3               // # of surrounding lines to display with file search matches
FindTreatment = Token              // one of 'Token', 'Word', 'Substring', 'Regex' or 'File'
                                   //   for how search terms should be considered

[Aliases]
/*
 * an alias is a way to reduce keystrokes/errors.  They are added as properties
 * to console.script.  There are 4 pre-defined aliases in the Basic-debug.oxp script
 * "oolite-debug-console.js":
 *   P = player,  PS = player.ship,  S = system &  M = missionVariables
 * An alias can be a reference, like these, or a value, object, function or an IIFE!
 * NB: if entering one manually, use <name> := ...
 *     this make parsing much easier, as := is not valid in JavaScript
 */
_clkOff := NM:(function cloakOff() { // tooltip: turn Constrictor's clock off
   var ship = console.script._constrictorShip_;
    if (!ship) {
        log("cloakOff, !ship => no Constrictor");
        return;
    }
    if (console.script.hasOwnProperty("_constrictorFCB_")) {
        var fcb = console.script._constrictorFCB_;
        if (fcb && isValidFrameCallback(fcb)) {
            removeFrameCallback(fcb);
            console.script._constrictorFCB_ = null;
        }
    }
    ship.switchAI("oolite-nullAI.js");
    ship.isCloaked = false;
    log("_clkOff, Constrictor is NOT cloaked");
})()
_clkOn := NM:(function () {

    function keepItCloaked() {
        var ship = console.script._constrictorShip_;
        if (!ship || !ship.isValid) {
            let fcb = console.script._constrictorFCB_;
            if (fcb && isValidFrameCallback(fcb)) {
                removeFrameCallback(fcb);
                console.script._constrictorFCB_ = null;
            }
        } else if (!ship.isCloaked) {
            ship.isCloaked = true;
        }
    }

    var ship = console.script._constrictorShip_;
    if (!ship) {
        log("_showCon, !ship => no Constrictor");
        return;
    }
    if (console.script.hasOwnProperty("_constrictorFCB_")) {
        let fcb = console.script._constrictorFCB_;
        if (fcb && isValidFrameCallback(fcb)) {
            removeFrameCallback(fcb);
        }
    }
    if (ship.energy < 200) {
        ship.energy = 200;
    }
    console.script._constrictorFCB_ = addFrameCallback(keepItCloaked.bind(console.script));
    log("_clkOn, Constrictor is cloaked");
})() //tooltip:after fn defn
_JamOff := NM:(function () {
    var ship = console.script._constrictorShip_;
    if (!ship) {
        log("_showJam, !ship => no Constrictor");
        return;
    }
    if (console.script.hasOwnProperty("_constrictorFCB_")) {
        let fcb = console.script._constrictorFCB_;
        if (fcb && isValidFrameCallback(fcb)) {
            removeFrameCallback(fcb);
            console.script._constrictorFCB_ = null;
        }
    }
    ship.switchAI("oolite-nullAI.js");
    ship.setEquipmentStatus("EQ_MILITARY_JAMMER", "EQUIPMENT_DAMAGED");
    log("_JamOff, military jammer disabled");
})()
_JamOn := NM:(function () {

    function keepItJammed() {
        var ship = console.script._constrictorShip_;
        if (!ship || !ship.isValid) {
            let fcb = console.script._constrictorFCB_;
            if (fcb && isValidFrameCallback(fcb)) {
                removeFrameCallback(fcb);
                console.script._constrictorFCB_ = null;
            }
        } else if (!ship.isJamming) {
            ship.isJamming = true;
        }
    }

    var ship = console.script._constrictorShip_;
    if (!ship) {
        log("_showCon, !ship => no Constrictor");
        return;
    }
    if (!ship.isJamming) {
        ship.setEquipmentStatus("EQ_MILITARY_JAMMER", "EQUIPMENT_OK");
        if (console.script.hasOwnProperty("_constrictorFCB_")) {
            let fcb = console.script._constrictorFCB_;
            if (fcb && isValidFrameCallback(fcb)) {
                removeFrameCallback(fcb);
            }
        }
        console.script._constrictorFCB_ = addFrameCallback(keepItJammed.bind(console.script));
    }
    log("_JamOn, Constrictor is " + (ship.isJamming ? "" : "NOT") + " jamming");
})()
addCon := NM:(function (pos) { /*  tooltip: spawn a constrictor ship in front of player */
    var constrictor = system.addShips("constrictor", 1, pos, 0);
    var ship = constrictor[0];
    ship.bounty = 250;    // Attach script here and not in shipdata, so that like_ship copies of the constrictor have no mission script,
    // only the version used for the mission will have the script now.
    // constrictor[0].setScript("oolite-constrictor.js");
    constrictor[0].setScript("oolite-nullAI.js");
    if (ship.equipmentStatus("EQ_CLOAKING_DEVICE") !== "EQUIPMENT_OK") {
        ship.awardEquipment("EQ_CLOAKING_DEVICE");
    }

    function keepItCloaked() {
        var ship = console.script._constrictorShip_;
        if (!ship || !ship.isValid) {
            let fcb = console.script._constrictorFCB_;
            if (fcb && isValidFrameCallback(fcb)) {
                removeFrameCallback(fcb);
                console.script._constrictorFCB_ = null;
            }
        } else if (!ship.isCloaked) {
            ship.isCloaked = true;
        }
    }

    console.script._constrictorShip_ = ship;
    if (console.script.hasOwnProperty("_constrictorFCB_")) {
        let fcb = console.script._constrictorFCB_;
        if (fcb && isValidFrameCallback(fcb)) {
            removeFrameCallback(fcb);
        }
    }
    console.script._constrictorFCB_ = addFrameCallback(keepItCloaked.bind(console.script));
    log("addCon, constrictor ship added");
})(player.ship.position.add(player.ship.heading.multiply(5000)))
addJam := N:(function (pos) {
    var constrictor = system.addShips("pirate", 1, pos, 0);
    var ship = constrictor[0];
    ship.bounty = 250;    // Attach script here and not in shipdata, so that like_ship copies of the constrictor have no mission script,
    // only the version used for the mission will have the script now.
    // constrictor[0].setScript("oolite-constrictor.js");
    constrictor[0].setScript("oolite-nullAI.js");
    if (ship.equipmentStatus("EQ_MILITARY_JAMMER") !== "EQUIPMENT_OK") {
        ship.awardEquipment("EQ_MILITARY_JAMMER");
    }

    function keepItJammed() {
        var ship = console.script._constrictorShip_;
        if (!ship || !ship.isValid) {
            let fcb = console.script._constrictorFCB_;
            if (fcb && isValidFrameCallback(fcb)) {
                removeFrameCallback(fcb);
                console.script._constrictorFCB_ = null;
            }
        } else if (!ship.isJamming) {
            ship.isJamming = true;
        }
    }

    console.script._constrictorShip_ = ship;
    if (console.script.hasOwnProperty("_constrictorFCB_")) {
        let fcb = console.script._constrictorFCB_;
        if (fcb && isValidFrameCallback(fcb)) {
            removeFrameCallback(fcb);
        }
    }
    console.script._constrictorFCB_ = addFrameCallback(keepItJammed.bind(console.script));
    log("addJam, pirate ship added");
})(player.ship.position.add(player.ship.heading.multiply(5000)))
cs := N:worldScripts.telescope.$curr_Sighting
csh := N:worldScripts.customShipyard
cst := P:worldScripts.telescope.$curr_Sighting.ent
descrV := NM:// eg. ps.heading.dot( ps.heading ) is not 1 but upto plus 4.30704e-8 and minus 2.24969e-7
// standard for equality: a - b < PRECISION => essentially equal; using 6 as .dot fluctuates
// .dot -1..0..1 spans PI radians; abs spans PI/2
(function (vect) {
    const PRECISION = 0.000001;

    function equal_value(a, b) {
        return Math.abs(a - b) < PRECISION;
    }
    var ws=worldScripts.telescope, ps=player.ship;
    var rad2deg = 180 / Math.PI;
    var v = vect.direction();
    var dot2deg = rad2deg * Math.PI / 2;
    var msg = " -> vector points ", decimals = 3;
    var dotForward = v.dot(ps.vectorForward), diffForward = Math.abs(dotForward) * dot2deg;
    var dotRight = v.dot(ps.vectorRight), diffRight = Math.abs(dotRight) * dot2deg;
    var dotUp = v.dot(ps.vectorUp), diffUp = Math.abs(dotUp) * dot2deg;
    var fwdMsg = false;
    if (equal_value(dotForward, 1)) {
        msg += "directly on heading";
        fwdMsg = true;
    } else if (!equal_value(dotForward, 0)) {
        msg += diffForward.toFixed(decimals) + "\xB0 ";
        msg += dotForward > 0 ? "fore " : "aft ";
        msg += dotUp > 0 ? "of zenith" : "of nadir";
        fwdMsg = true;
    }
    if (!equal_value(dotRight, 0)) {
        if (fwdMsg) {
            msg += ", ";
        }
        msg += diffRight.toFixed(decimals) + "\xB0 ";
        msg += dotRight > 0 ? "starboard" : "port";
    }
    if (!equal_value(dotUp, 0)) {
        if (fwdMsg) {
            msg += ", ";
        }
        msg += diffUp.toFixed(decimals) + "\xB0 ";
        msg += dotUp > 0 ? "up" : "down";
    }
    log(msg);
})()
dist := NM:function dist(ent) {
    var ps = player.ship, ws = worldScripts.telescope;
    if (!ent) {        // if none supplied, default to player's target
        ent = ps.target;
    }
    if (ws && ent.dataKey === "telescopemarker") {
        ent = ws.$TelescopeList[ws.$TelescopeListi - 1];
    }
    // print distance & relativeDirection
    var cnv = 180 / Math.PI;
    var vect = ent.position.subtract(ps);
    var dist = vect.magnitude() - ent.collisionRadius, uvect = vect.direction(), fdot = uvect.dot    /* unit vector to target */
    (ps.vectorForward), rdot = uvect.dot(ps.vectorRight), udot = uvect.dot(ps.vectorUp);
    var msg = "dist: "   // cosine of angle wrt uvect
     + dist.toFixed() + ", " + (fdot >= 0 ? "ahead" : "behind");
    msg += ": " + (Math.acos(fdot) * cnv).toFixed(2) + " degrees off center" + ", ";
    msg += (rdot >= 0 ? "right" : "left") + ": " + (90 - Math.acos(rdot) * cnv).toFixed(2);
    msg += " degrees" + ", " + (udot >= 0 ? "up" : "down") + ": " + (90 - Math.acos(udot) * cnv).toFixed(2) + " degrees";
    log(msg);
}
fCon := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: continuous, no filter
    ws.$MFDFiltering = false;
    ws.$SeparateMFDs = true;
    //     ws.$MFDPrimaryStatic = MFD_NEUTRAL;
    //    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    //    ws.$MFDAuxStatic = MFD_NEUTRAL | MFD_NAVIGATION;
    //    ws.$MFDAuxDynamic = MFD_FARAWAY;
    ws._reload_config();
    log("filter: continuous");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fFar := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: navigation: near, far
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_STATION | MFD_NAVIGATION | MFD_CELESTIAL;
    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    ws.$MFDAuxStatic = MFD_STATION | MFD_NAVIGATION | MFD_CELESTIAL;
    ws.$MFDAuxDynamic = MFD_FARAWAY;
    ws._reload_config();
    log("filter: far (nav. only)");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fHunt := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: bounty hunter filter
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_PIRATES | MFD_SALVAGE;
    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    ws.$MFDAuxStatic = MFD_TRADERS | MFD_NEUTRAL | MFD_NAVIGATION;
    ws.$MFDAuxDynamic = MFD_RANGED;
    ws._reload_config();
    log("filter: bounty hunter");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fMil := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: military filter
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_MILITARY;
    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    ws.$MFDAuxStatic = MFD_MILITARY;
    ws.$MFDAuxDynamic = MFD_FARAWAY;
    ws._reload_config();
    log("filter: military");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fMine := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: mining filter
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_ORIENT | MFD_POLICE | MFD_PIRATES | MFD_MILITARY;
    ws.$MFDPrimaryDynamic = MFD_RANGED;
    ws.$MFDAuxStatic = MFD_INANIMATE;
    ws.$MFDAuxDynamic = MFD_RANGED;
    ws._reload_config();
    log("filter: miner");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fNavHostile := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: hostiles/nav filter
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_HOSTILE | MFD_ACTIVE;
    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    ws.$MFDAuxStatic = MFD_STATION | MFD_NAVIGATION | MFD_CELESTIAL;
    ws.$MFDAuxDynamic = MFD_RANGED;
    ws._reload_config();
    log("filter: nav. w/ hostiles");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fOff := NM:(function () {
    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;        // getter invokes iife
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: no filter/2nd MFD off
    ws.$MFDFiltering = false;
    ws.$SeparateMFDs = false;
    ws._reload_config();
    log("filter: off");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fPirate := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET = 127;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: pirate filter
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_TRADERS | MFD_SALVAGE;
    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    ws.$MFDAuxStatic = MFD_TRADERS | MFD_POLICE | MFD_ORIENT;
    ws.$MFDAuxDynamic = MFD_RANGED;
    ws._reload_config();
    log("filter: pirate");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fPol := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: police filter
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_POLICE;
    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    ws.$MFDAuxStatic = MFD_POLICE;
    ws.$MFDAuxDynamic = MFD_FARAWAY | MFD_ORIENT;
    ws._reload_config();
    log("filter: police");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fTrade := NM:(function () {
    const MFD_SALVAGE = 1,          // cargo, escape pods, derelicts
    MFD_MINING = 2,    // asteroids, boulders, splinters & metal fragments
    MFD_WEAPONS = 4,    // mines & missiles
    MFD_INANIMATE = 7,    // those of 1st 3 flags excluded from dynamic filtering
    MFD_TRADERS = 8,    // ships .isTrader & escorts
    MFD_POLICE = 16,    // scanClass === "CLASS_POLICE"
    MFD_PIRATES = 32,    // .isPirate & .isPirateVictim
    MFD_MILITARY = 64,    // scanClass === "CLASS_MILITARY"
    MFD_ALIENS = 128,    // scanClass === "CLASS_THARGOID"
    MFD_NEUTRAL = 256,    // scanClass === "CLASS_NEUTRAL" and not in any above category (e.g., miners, hunters, etc.)
    MFD_ALLSHIPS = 504,    // all of the previous 6
    MFD_STATION = 512,    // .isStation
    MFD_NAVIGATION = 1024,    // some stations & beacons (may include a ship if emitting a beacon)
    MFD_CELESTIAL = 2048,    // sun, planets, moons
    MFD_ORIENT = 3584;    // all of the previous 3    // ws.$MFD_STATIC_ALLSET = 4095;

    const MFD_FRIENDLY = 1,    // bounty === 0 && !markedForFines
    MFD_UNSOCIABLE = 2,    // bounty || markedForFines
    MFD_ACTIVE = 4,    // has .target || defenseTargets.length > 0
    MFD_HOSTILE = 8,    // in_ents_Targets || targetting_ps
    MFD_ATTITUDE = 15,    // those of 1st 4 flags used to choose targets
    MFD_NEARBY = 16,    // distance < scannerRange
    MFD_PROTECTED = 32,    // .withinStationAegis
    MFD_FARAWAY = 64,    // distance > scannerRange
    MFD_RANGED = 112;    // those of prev. 3 flags used to limit those chosen    // ws.$MFD_DYNAMIC_ALLSET;

    if (!ws.$DebugMessages) {
        ws.$DebugMessages = true;
        let tmp = console.script.treset;
    }
    ps.setMultiFunctionText(ws.$PrimaryMFD_name, "", false);
    ps.setMultiFunctionText(ws.$AuxilaryMFD_name, "", false);
    // tooltip: trader filter
    ws.$MFDFiltering = true;
    ws.$SeparateMFDs = true;
    ws.$MFDPrimaryStatic = MFD_SALVAGE | MFD_MINING | MFD_TRADERS | MFD_PIRATES;
    ws.$MFDPrimaryDynamic = MFD_NEARBY;
    ws.$MFDAuxStatic = MFD_POLICE | MFD_PIRATES | MFD_ORIENT;
    ws.$MFDAuxDynamic = MFD_FARAWAY;
    ws._reload_config();
    log("filter: traders");
    ws._report_config("experimental");
    ws.update_MFDs(null, true);
})()
fz := NM:(function freeze() {
    /*
     * tooltip: freeze in place all drifting objects
     */

    function drain(ents) {
        for (let x = 0, len = ents.length; x < len; x++) {
            let ent = ents[x];
            if (!ent || !ent.isValid) {
                continue;
            }
            if (!ent.isFrangible) {
                continue;
            }
            ent.velocity = NULL_VECTOR;
            ent.roll = ent.maxRoll = 0;
            ent.pitch = ent.maxPitch = 0;
            ent.yuaw = ent.maxYaw = 0;
        }
    }

    var ps = player && player.ship;
    var ents, NULL_VECTOR = Vector3D([0, 0, 0]);
    ents = system.entitiesWithScanClass("CLASS_ROCK", ps, ps.scannerRange);
    drain(ents);
    ents = system.entitiesWithScanClass("CLASS_CARGO", ps, ps.scannerRange);
    drain(ents);
})()
hs := PM:(function hudShift() {
    ws.$VTarget_HUD_shift = [- 18.75, 3.75, 0];
    //    ws.$VTarget_HUD_shift = [0, 0, 0];
    ws._set_vShip_posn(ps.viewPositionForward, ws.$VTarget_HUD_shift);
    ws._reload_config();
})()
ht := NM:(function () {
    player.ship.hudHidden = !player.ship.hudHidden;
    log("hudHidden is " + player.ship.hudHidden);
})()
mag := NM:magnitude()
mainStn := NM:system.mainStation
p0 := N:system.planets[0]
p1 := N:system.planets[1]
p2 := N:system.planets[2]
p3 := N:system.planets[3]
p4 := N:system.planets[4]
p5 := N:system.planets[5]
pos := NM:position
ps := P:player.ship
pship := NM:player.ship
psp := P:player.ship.position
ptarg := NM:player.ship.target
s0 := N:system.stations[0]
s1 := N:system.stations[1]
s2 := N:system.stations[2]
s3 := N:system.stations[3]
s4 := N:system.stations[4]
s5 := N:system.stations[5]
s6 := N:system.stations[6]
s7 := N:system.stations[7]
s8 := N:system.stations[8]
s9 := N:system.stations[9]
scrnShot := N:function (showHUD) { // default screen shot has HUD hidden
    // utility funcion called by 'scrS' & 'scrShud'

    function _hideIt() {
        // hide HUD, stop timers if last in sequence
        var cs = console.script;
        if (cs._debugShootWithHUD_) {
            player.ship.hudHidden = cs._debugHUDstate_;
            cs._debugHUDoffTimer_.stop();
            cs._debugSnapShotTimer_.stop();
            cs._debugHUDonTimer_.stop();
        } else {
            player.ship.hudHidden = true;
        }
    }


    function _showIt() {
        // show HUD, stop timers if last in sequence
        var cs = console.script;
        if (cs._debugShootWithoutHUD_) {
            player.ship.hudHidden = cs._debugHUDstate_;
            cs._debugHUDoffTimer_.stop();
            cs._debugSnapShotTimer_.stop();
            cs._debugHUDonTimer_.stop();
        } else {
            player.ship.hudHidden = false;
        }
    }

    var cs = console.script, step = 0.2;
    if (showHUD === undefined || showHUD === null) {
        showHUD = false;
    }
    cs._debugShootWithHUD_ = showHUD;
    cs._debugShootWithoutHUD_ = !showHUD;
    cs._debugHUDstate_ = player.ship.hudHidden;
    if (!cs.hasOwnProperty("_debugHUDoffTimer_")) {
        cs._debugHUDoffTimer_ = new Timer(cs, _hideIt, cs._debugShootWithoutHUD_ ? step : step * 3, 1);
        cs._debugSnapShotTimer_ = new Timer(cs, function () {takeSnapShot();}, step * 2, 1);
        cs._debugHUDonTimer_ = new Timer(cs, _showIt, cs._debugShootWithHUD_ ? step : step * 3, 1);
        return;
    }
    var HUDoffTimer = cs._debugHUDoffTimer_, SnapShotTimer = cs._debugSnapShotTimer_, HUDonTimer = cs._debugHUDonTimer_;
    if (HUDoffTimer.isRunning) {
        HUDoffTimer.stop();
    }
    if (SnapShotTimer.isRunning) {
        SnapShotTimer.stop();
    }
    if (HUDonTimer.isRunning) {
        HUDonTimer.stop();
    }
    var currSec = clock.absoluteSeconds;
    HUDoffTimer.nextTime = currSec + (cs._debugShootWithoutHUD_ ? step : step * 3);
    SnapShotTimer.nextTime = currSec + step * 2;
    HUDonTimer.nextTime = currSec + (cs._debugShootWithHUD_ ? step : step * 3);
    HUDoffTimer.start();
    SnapShotTimer.start();
    HUDonTimer.start();
}
scrS := NM:(function () { /* tooltip: screenshot without HUD */
    console.script.scrnShot();
})()
scrShud := NM:(function () { /* tooltip: screenshot with HUD visible */
    console.script.scrnShot(true);
})()
slock := N:(function () { /* tooltip: toggle state of sniperlock */
    var sl = worldScripts.sniperlock;
    if (sl === null) {
        return;
    }
    if (sl.deactivate == "TRUE") {
        sl.deactivate = "FALSE";
    } else if (sl.deactivate == "FALSE") {
        sl.deactivate = "TRUE";
    }
    log("sniperlock.deactivate = " + sl.deactivate);
})()
sreset := NM:(function () { // station options IIFE for reloading new closure code
    // console.clearConsole(); comment for debug
    var ws = worldScripts.telescope;
    var so = worldScripts.station_options;
    delete so._setInterfaces;    // so closure will be re-invoked

    // for testing
    //    so.$O_initStationOptions(ws, "telescope_", ws._stnOptionsAllowed, true, ws._reloadFromStn); // , true , "summary" , "autosave"
    ws._startStationOptions();

    // for testing multiple oxps
    // var fs = worldScripts.fps_monitor;
    // so.$O_initStationOptions( fs, "fps_monitor_", null, false, fs._reload_options );
    so._setInterfaces();    // player.ship.hudHidden = false;
    so.$optionsStarted = false;
})()
ss := N:system.stations
st := N:worldScripts.station_options
sub := NM:subtract()
Targ20 := N:(function (name) {
    ws.$MaxTargets = 20;
    ws._reload_config();
    ws._report_config("config");
})()
tbrk := NM:(function () {
    // damage telescope to test its damage handling
    var ps = player && player.ship;
    var ws = worldScripts.telescope;
    /* break everything */
    ps.setEquipmentStatus("EQ_TELESCOPE", "EQUIPMENT_DAMAGED");
    // setting 0 awaits cheap repair
    ws.$FixedTel = 0;
})() /* good for missionVariables */
tfix := NM:(function () { /* restore damaged telescope */
    var ps = player && player.ship;
    var ws = worldScripts.telescope;
    ps.setEquipmentStatus("EQ_TELESCOPE", "EQUIPMENT_OK");
    ws.$FixedTel = 0;
    ps.setEquipmentStatus("EQ_GRAVSCANNER", "EQUIPMENT_OK");
    ws.$FixedGS = 0;
    ps.setEquipmentStatus("EQ_SMALLDISH", "EQUIPMENT_OK");
    ws.$FixedSD = 0;
})()
treset := NM:(function () { // telescope IIFE for reloading new _Sightings_closure
    var ws = worldScripts.telescope;
    // console.clearConsole(); comment for debug
    ws._StopTimer();
    ws._shutdown_Sightings();
    ws._init_Sightings_closure();
    // for debugging  Sighting
    if (ws.$DebugMessages) {
        ws._debug_Sightings_closure();
    }
    //ws.time_create = sc.time_create;                  ws.time_update = sc.time_update;                //cagiife
    //ws.time_refresh = sc.time_refresh;                ws.profile_create = sc.profile_create;        //cagiife
    //ws.profile_update = sc.profile_update;            ws.profile_refresh = sc.profile_refresh;        //cagiife
    //ws.set_profiling = sc.set_profiling;              ws.clear_profiling = sc.clear_profiling;            //cagiife
    ws._initOxpVars();
    ws._set_vShip_posn(ps.viewPositionForward, ws.$VTarget_HUD_shift);    // NB: these are basically shipLaunchedFromStation, so comment out if testing involves launch
    ws._init_player_vars(true);
    ws._restart_after_shutdown();
    ws._create_Sightings();
    ws._StartTimer(1);
})()
tsm := NM:worldScripts.telescope.$SightingsMap
vr := P:worldScripts.telescope.$vring
vs := P:worldScripts.telescope.$vship
ws := N:worldScripts.telescope
wsc := P:worldScripts.telescope.$Sighting_closure
wt := N:worldScripts.towbar
